import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression, Ridge
from statsmodels.tsa.arima.model import ARIMA
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Load data
data = pd.read_csv('historical_weather_data.csv')

# Check column names
print(data.columns)

# Inspect the first few rows of data
print(data.head())

# Preprocessing
data.fillna(method='ffill', inplace=True)  # Handle missing values

# Ensure the 'Date' column is correctly named
date_col = ''
if 'Date' in data.columns:
    date_col = 'Date'
elif 'date' in data.columns:
    date_col = 'date'
else:
    print("Date column not found.")
    # Exit or handle accordingly

# Ensure the 'Precipitation' and 'Humidity' columns are present
if 'Precipitation' in data.columns and 'Humidity' in data.columns:
    data['Month'] = pd.to_datetime(data[date_col]).dt.month
    X = data[['Month', 'Precipitation', 'Humidity']]
else:
    print("One or more required columns (Precipitation, Humidity) are missing.")
    X = None

# Ensure the 'Temperature' column is present
if 'Temperature' in data.columns:
    y = data['Temperature']
elif 'temp' in data.columns:
    y = data['temp']
else:
    print("Temperature column not found.")
    y = None

# Proceed only if X and y are defined
if X is not None and y is not None:
    # Train-Test Split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Linear Regression Model
    lin_reg = LinearRegression()
    lin_reg.fit(X_train, y_train)
    y_pred_lin = lin_reg.predict(X_test)
    print(f'Linear Regression MAE: {mean_absolute_error(y_test, y_pred_lin)}')

    # ARIMA Model
    arima_model = ARIMA(y_train, order=(5,1,0))
    arima_result = arima_model.fit()
    y_pred_arima = arima_result.forecast(steps=len(y_test))
    print(f'ARIMA MAE: {mean_absolute_error(y_test, y_pred_arima)}')

    # Ridge Regression Model
    ridge = Ridge()
    param_grid = {'alpha': [0.1, 1.0, 10.0]}
    grid_search = GridSearchCV(ridge, param_grid, cv=5)
    grid_search.fit(X_train, y_train)
    y_pred_ridge = grid_search.predict(X_test)
    print(f'Ridge Regression MAE: {mean_absolute_error(y_test, y_pred_ridge)}')
else:
    print("Required columns are missing. Unable to proceed with model training.")
